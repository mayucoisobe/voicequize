import Head from 'next/head';
import Image from 'next/image';
import { useEffect, useState } from 'react';
import useStore from '../store';
import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';

import questions from '@/constants/questions';
import { ModalCorrect } from '@/components/ModalCorrect';
import { ModalInCorrect } from '@/components/ModalInCorrect';
import { ModalGameOver } from '@/components/ModalGameOver';
import { ButtonStart } from '@/components/ButtonStart';
import { LocalStorageGet } from '@/components/LocalStorageGet';
import { GridBox } from '@/components/GridBox';
import WebSpeechAPI from '@/components/WebSpeechAPI';
import { AudioSounds } from '@/components/AudioSounds';
import { VolumeControl } from '@/components/VolumeControl';

import { ReactComponent as IconStar } from '../../public/images/common/icon_starCount.svg';
import { ReactComponent as IconHand } from '../../public/images/common/icon_pointhand.svg';

export default function Home() {
  // const { localData } = useStore();
  // 以下はconst {localData} = usestore(); じゃない？上記で修正してみる
  // Zstandでは関数で返ってくるので、配列として使用するためには　localDataを呼び出す必要があるので、上記のは不可っぽい???
  const localData = useStore((state) => state.localData);
  const { point } = useStore();
  const resetPoint = useStore((state) => state.resetPoint);
  const resetSetIndexList = useStore((state) => state.resetSetIndexList);
  const { quizlist } = useStore();
  const setQuizlist = useStore((state) => state.setQuizlist);
  const { index } = useStore();
  const setIndex = useStore((state) => state.setIndex);
  const { isStart } = useStore();
  const setIsStart = useStore((state) => state.setIsStart);
  const { getTranscript } = useStore();
  const setHiraganaData = useStore((state) => state.setHiraganaData);

  const [text, setText] = useState('');
  const [show, setShow] = useState('0'); // 正解 1/不正解 2/ゲームオーバー 3のモーダル切替
  const [image, setImage] = useState('q_circle');
  const { transcript, finalTranscript } = useSpeechRecognition();

  // 既に正解しているクイズを除く(ローカルデータとの差分チェック)
  const filteredQuizList = (array) => {
    return array.filter((item) => {
      return !localData.map((data) => data.id).includes(item.id);
    });
  };

  const shuffleStart = () => {
    const shuffleArray = (array) => {
      const cloneArray = [...array];
      for (let i = cloneArray.length - 1; i >= 0; i--) {
        let rand = Math.floor(Math.random() * (i + 1));
        // 配列の要素の順番を入れ替える
        [cloneArray[i], cloneArray[rand]] = [cloneArray[rand], cloneArray[i]];
      }
      const filteredArray = filteredQuizList(cloneArray);
      setQuizlist(filteredArray);
      // console.log(cloneArray);
      // console.log(filteredArray);
    };
    shuffleArray(questions);
  };

  useEffect(() => {
    if (quizlist.length > 0) {
      setImage(quizlist[index].id);
      setIsStart(true);
    }
  }, [quizlist]);

  // console.log(quizlist);

  useEffect(() => {
    if (point === 0) {
      setTimeout(() => {
        setShow(3);
      }, 5000);
    }
  }, [point]);

  // 次のクイズへ
  const handleNextQuiz = () => {
    if (quizlist.length === index + 1) {
      alert('全問おわり！リセットすればまた遊べます！');
      return;
    } else {
      resetPoint();
      resetSetIndexList();
      setIndex(index + 1);
      setImage(quizlist[index + 1].id);
      setHiraganaData('');
      // console.log(index);
    }
  };

  // 入力した内容を取得
  const inputChange = (e) => {
    setText(e.target.value);
  };
  // 正解か不正解の判別
  const checkAnswer = () => {
    // text === quizlist[index].check ? setShow(1) : setShow(2);
    // getTranscript === quizlist[index].check ? setShow(1) : setShow(2);
    finalTranscript === quizlist[index].check ? setShow(1) : setShow(2);
  };

  return (
    <>
      <Head>
        <title>voice de quize</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="wrapper pb-12">
        <div className="mx-auto max-w-sm px-8">
          <VolumeControl />
          <section>
            <div className="mb-3 flex gap-1.5">
              {[...Array(point)].map((_, index) => (
                // <Star key={index} className="animate-flip-out-ver-right" />
                <IconStar key={index} />
              ))}
            </div>
          </section>
          <section className={`${!isStart ? 'pointer-events-none' : 'pointer-events-auto'}`}>
            {/* <div className="ma-w-256 relative bg-white xs:max-w-full "> */}
            <div className="relative bg-white ">
              <Image
                src={`/images/questions/${image}.jpg`}
                width={640}
                height={480}
                alt="car"
                className="container rounded-xl border-4 border-solid border-customBlue object-contain object-center"
              />
              <GridBox />
            </div>
          </section>
          <section className="mt-5">
            {/* スタートボタンを押したらボタン非表示〜クイズシャッフル＆クリック可能〜マイク表示 */}
            {!isStart ? (
              <div className="relative">
                <ButtonStart onClick={shuffleStart}>PLAY</ButtonStart>
                {/* <IconHand className="absolute top-24 right-5 animate-up-down" /> */}
                <Image
                  src="/images/common/icon_pointhand.png"
                  width={100}
                  height={100}
                  alt="point-hand"
                  className="absolute top-24 right-5 animate-up-down"
                />
                <AudioSounds src="/resources/bgm_Monkeys-Spinning-Monkeys.mp3" autoPlay />
              </div>
            ) : (
              <div>
                <WebSpeechAPI checkAnswer={checkAnswer} />
                {/* <div>{transcript}</div> */}
                <AudioSounds src="/resources/dialogue_touch.mp3" autoPlay />
                {/* 正解の判断はこちらで行う（漢字自動出力） */}
                {/* <Button styleType="primary" text="次のクイズ" onClick={handleNextQuiz} />
                <button onClick={checkAnswer}>回答する</button>
                <h2 className="mt-5">{text}</h2>
                <input onChange={inputChange} placeholder="テキスト入力"></input> */}
              </div>
            )}
          </section>
          <ModalCorrect
            show={show}
            setShow={setShow}
            handleNextQuiz={handleNextQuiz}
            setIndex={setIndex}
            contents={quizlist[index]?.answer}
            english={quizlist[index]?.english}
            spanish={quizlist[index]?.spanish}
            image={image}
          >
            <img src={`/images/questions/${image}.jpg`} alt="車の画像" />
          </ModalCorrect>
          <ModalInCorrect show={show} setShow={setShow}></ModalInCorrect>
          <ModalGameOver
            show={show}
            setShow={setShow}
            handleNextQuiz={handleNextQuiz}
            setIndex={setIndex}
            contents={quizlist[index]?.answer}
            image={image}
          >
            <img src={`/images/questions/${image}.jpg`} alt="車の画像" />
          </ModalGameOver>
        </div>
        {/* 初回ページアクセス時のポイント表示 各ページに記載 */}
        <LocalStorageGet />
      </div>
    </>
  );
}

// 音楽のクレジット表記
// Fluffing a Duck Kevin MacLeod (incompetech.com)
// Licensed under Creative Commons: By Attribution 3.0 License
// http://creativecommons.org/licenses/by/3.0/
// Music promoted by https://www.chosic.com/free-music/all/
